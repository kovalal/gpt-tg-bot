from models import User
from aiogram import types
from aiogram.fsm.context import FSMContext

import tasks.messages
from .keyboards import get_models_keyboard
from dt import retrive, update, create
import tasks
import config
import json


async def start(message: types.Message, *args, user=None, bot=None, **kwargs):
    await message.answer(
        "–ü–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.\n" 
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏: gpt-4o-mini, gpt-4o, o1, dallee.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å, –ø–æ–ø—Ä–æ—Å–∏ –æ–± —ç—Ç–æ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        parse_mode="HTML"
    )

class FSMPrompt:
    buying = "buying"
    donating = "donating"
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞
async def send_invoice_handler(message: types.Message, *args, user=None, bot=None, **kwargs):
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        bot.logger.info(f"Processing payment for user: {user.id if user else 'Unknown'}")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            #[
            #    types.InlineKeyboardButton(
            #        text="–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 300",
            #        callback_data="subscribe_month"
            #    )
            #],
            [
                types.InlineKeyboardButton(
                    text="–î–æ–Ω–∞—Ç–∏—Ç—å",
                    callback_data="donate"
                )
            ]
        ])

        await message.answer(
            #"<b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            #"–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞.\n"
            #"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:",
            "<b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        bot.logger.error(f"Failed to process payment: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        raise


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–Ω–∞—Ç–∏—Ç—å"
async def donate_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –ó–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏—Ç–µ 100 –¥–ª—è 100 —Ä—É–±–ª–µ–π):")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await state.set_state(FSMPrompt.donating)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞
async def donation_amount_handler(message: types.Message, state: FSMContext):
    try:
        amount_text = message.text.strip()
        if not amount_text.isdigit():
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –Ω–µ –º–µ–Ω–µ–µ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500).")
            return
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ –∫–æ–ø–µ–π–∫–∏
        rubles = int(amount_text)
        donation_amount = rubles * 100
        prices = [types.LabeledPrice(label="–î–æ–Ω–∞—Ç", amount=donation_amount)]
        
        await message.answer_invoice(
            title="–î–æ–Ω–∞—Ç",
            description="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
            payload="donation_payload",
            provider_token=config.PROVIDER_TOKEN,
            currency='RUB',
            prices=prices,
            need_phone_number=False,
            need_email=False
        )
        await state.clear()
    except Exception as e:
        message.bot.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–Ω–∞—Ç–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –¥–æ–Ω–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
# –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ —Ñ–∏–ª—å—Ç—Ä—É —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å F.successful_payment
async def process_successful_payment(message: types.Message, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        sp = message.successful_payment
        total_amount = sp.total_amount  # —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        rubles = total_amount // 100      # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä—É–±–ª–∏
        currency = sp.currency
        payload = sp.invoice_payload

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        create.create_payment(message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
        if payload == "donation_payload":
            await message.reply(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç –Ω–∞ —Å—É–º–º—É {rubles} {currency}!üôè")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–Ω–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î)
        elif payload == "bot_paid":
            await message.reply(f"–ü–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å—É–º–º—É {rubles} {currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞)
        else:
            await message.reply(f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {rubles} {currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        message.bot.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
async def process_unsuccessful_payment(message: types.Message, state: FSMContext):
    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂!")
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()


async def clear_context_handler(message: types.Message, *args, user: User = None, bot=None, **kwargs):
    """
    Handler for clearing chat context.
    Removes forced reply markup from the bot's last message.
    """
    try:
        tg_msg = await bot.send_message(chat_id=user.id, text="Reply markup cleared", reply_markup=types.ReplyKeyboardRemove())
        await bot.delete_message(chat_id=user.id, message_id=tg_msg.message_id)
    except Exception as e:
        message.bot.logger.error(f"Failed to clear forced reply for user {user.id}: {repr(e)}")


async def model_command_handler(message: types.Message, *args, user: User = None, **kwargs):
    """
    Handler for the /model command.
    Shows the menu for model selection.
    """
    current_model = user.model or "auto"

    await message.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–¥–µ–ª—å {current_model}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –º–æ–¥–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ:", 
                         reply_markup=get_models_keyboard())


async def model_callback_handler(callback_query: types.CallbackQuery):
    """
    Handle the selection of a model from the inline keyboard.
    Updates the user's model in the database.
    
    :param callback_query: CallbackQuery object
    :param session: SQLAlchemy session instance
    """
    model_name = callback_query.data.split(":")[1]

    # Retrieve the user from the database
    user_id = callback_query.from_user.id
    user = retrive.retrive_user(user_id)
    update.set_user_model(user, model_name)

    await callback_query.message.answer(f"Your model has been set to: {model_name}")
    await callback_query.answer()


async def prompt_handler(message: types.Message, *args, user=None, bot=None, **kwargs):
    try:
        # Enqueue message processing task
        clock_msg = await message.reply("‚è≥")
        task = tasks.messages.process_message.delay(clock_msg_id=clock_msg.message_id, **message.dict(), user=user.as_dict())
        bot.logger.info(f"Enqueued task: {task.id}")
    except Exception as e:
        bot.logger.error(f"Failed to enqueue task: {e}")
        await message.reply("–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        raise


async def voice_handler(message: types.Message, *args, user=None, bot=None, **kwargs):
    # —Å—Ç–∞–≤–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    try:
        # Enqueue message processing task
        print(message)
        clock_msg = await message.reply("‚è≥")
        task = tasks.messages.transcribe_voice.delay(clock_msg_id=clock_msg.message_id, message=message.dict(), user=user.as_dict())
        bot.logger.info(f"Enqueued task: {task.id}")
    except Exception as e:
        bot.logger.error(f"Failed to enqueue task: {e}")
        await message.reply("–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        raise


async def notify_handler(message: types.Message, *args, user=None, bot=None, **kwargs):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /notify. –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
    –ù–∞–ø—Ä–∏–º–µ—Ä: /notify –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã.
    
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param db: —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Å—Å–∏–∏ SQLAlchemy (–∏–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è), —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤—Å–µ, —á—Ç–æ –ø–æ—Å–ª–µ /notify)
    notify_text = message.text.lstrip('/notify')
    if not notify_text:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /notify")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    users = retrive.retrive_all_users()
    sent_count = 0
    for user in users:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.bot.send_message(user.id, notify_text)
            sent_count += 1
        except Exception as e:
            message.bot.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

    await message.reply(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")